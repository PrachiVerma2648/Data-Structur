#include<conio.h>
#include<stdio.h>
#include<alloc.h>
typedef struct dlklist
{
struct dlklist *prev;
int info;
struct dlklist *next
}node;
void main()
{
int ch, data, item;
node *head, *tail;
void create_dlklist(node **,node**);
create_dlklist(&head,&tail);
void insert_at_beg(node **, node **);
void insert_at_end(node **,node **);
void traverse(node *);
void traverse_in_rev_order(node *);
while(1)
{
printf("1. for inserting at begning\n");
printf("2. for inserting at end\n");
printf("3. for traversing in normal order\n");
printf("4. for traversing in reverse order\n");
printf("5. EXIT\n");
scanf("%d",&ch)
{
case 1:printf("Enter element to insert\n");
	scanf("%d",&data);
	insert_at_beg(&head,&tail,data);
	break;
case 2:printf("Enter element at the end\n");
	scanf("%d",&data);
	insert_at_end(&head,&tail,data);
	break;
case 3:traverse(head);
	break;
case 4:traverse_in_rev_order(tail);
	break;
case 5:Exit();
	break;
default:printf("No choice entered\n");
	break;
}
}
getch();
}
void create_dlklist(node **head,node **tail)
{
*head=NULL;
*tail=NULL;
}
void insert_at_beg(node **head, node **tail,int data)
{
node*temp;
temp=(node *)malloc(sizeof(node));
temp->info=data;
temp->prev=NULL;
temp->next=*head;
if(*head==NULL)
{
*head=*tail=temp;
}
else
{
 (*tail)->prev=temp;
 *tail=temp
}
}
void insert_at_end(node **head,node **tail,int data)
{
 node*temp;
 temp=(node*)malloc(sizeof(node));
 temp->info=data;
 temp->next=NULL;
 temp->prev=*tail;

}
 if(*head==NULL)
{
*head=*tail=temp;
}
else
{
 (*tail)->next=temp;
 *tail=temp
}
}
void traverse(node *);
{
 while(head!=NULL)
 {
  printf("%d",head->info);
  head=head->next;
 }
}
void traverse_in_rev_order(node *tail);
{
 while(head!=NULL)
 {
  printf("%d",tail->info);
  tail=tail->prev;
 }
 }
